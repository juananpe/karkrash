@startuml

actor Customer as "Customer"
participant GUI
participant "BLFacade" as BLFacade
participant "DataAccess" as DataAccess
participant "EntityManager" as EntityManager
database "Vehicle Room" as VehicleRoom
entity "Vehicle Type" as VehicleType
entity Vehicle
entity "Rate" as Rate

GUI -> BLFacade : getOffices()
activate BLFacade
BLFacade -> DataAccess : getOffices()
  note right
    Q1: SELECT o FROM Office o
  end note
activate DataAccess
DataAccess -> EntityManager : getOffices(Q1)
deactivate DataAccess
deactivate BLFacade


GUI -> BLFacade : getModels()
BLFacade -> DataAccess : getModels()
DataAccess -> EntityManager : getModels(Q2)
  note right
    Q2: SELECT DISTINCT v.vehicleType.model FROM Vehicle v
  end note


GUI -> BLFacade : getBrands()
BLFacade -> DataAccess : getBrands()
DataAccess -> EntityManager : getBrands(Q3)
  note right
    Q3: SELECT DISTINCT v.vehicleType.brand FROM Vehicle v
  end note

GUI -> BLFacade : getAvailableVehicles(office, brand, model, endDate)
BLFacade -> DataAccess : getAvailableVehicles(office, brand, model, endDate)
DataAccess -> EntityManager : getAvailableVehicles(Q4)
  note right
    Q4: SELECT new VehicleModel(v.licensePlate, v.vehicleType.brand, v.vehicleType.model, t.pricePerDay)
            FROM Vehicle v, Tariff t
            WHERE v.vehicleType.brand = :brand
            AND v.vehicleType.model = :model
            AND v.state = VehicleState.AVAILABLE
            AND t.office = :office
            AND t.startDate <= :endDate
            AND t.endDate >= :endDate
  end note


GUI -> BLFacade : s,brand,model,fdate
activate BLFacade
BLFacade -> DataAccess : register(s,brand,model,fdate)
activate DataAccess
DataAccess -> EntityManager : getAvailable(brand,model)
activate EntityManager
EntityManager -> VehicleRoom : find(s)
activate VehicleRoom
VehicleRoom --> EntityManager : vehicleRoom
EntityManager --> DataAccess : vehicleType = getAvailableType(brand,model)
deactivate VehicleRoom
EntityManager -> VehicleType : getAvailableType(brand,model)
activate VehicleType
VehicleType --> EntityManager : vehicleType
EntityManager --> DataAccess : vehicle = getAvailable(vehicleType)
deactivate VehicleType
DataAccess -> Vehicle : getAvailable(vehicleType)
activate Vehicle
loop for each vehicle
    Vehicle -> Vehicle : getAvailable()
end
Vehicle --> DataAccess : vehicle
deactivate Vehicle
DataAccess --> BLFacade : vehicle
deactivate DataAccess
BLFacade -> VehicleRoom : getRate(vehicleRoom,brand,model,fdate)
activate VehicleRoom
VehicleRoom --> BLFacade : rate
deactivate VehicleRoom
BLFacade --> GUI : rate
deactivate BLFacade

@enduml