@startuml

actor Customer as "Customer"
participant GUI
participant "BLFacade" as BLFacade
participant "DataAccess" as DataAccess
participant "EntityManager" as EntityManager
participant "VehicleModel" as VehicleModel

GUI -> BLFacade : getOffices()
activate BLFacade
BLFacade -> DataAccess : getOffices()
  note right
    Q1: SELECT o FROM Office o
  end note
activate DataAccess
DataAccess -> EntityManager : getOffices(Q1)
deactivate DataAccess
deactivate BLFacade


GUI -> BLFacade : getModels()
BLFacade -> DataAccess : getModels()
DataAccess -> EntityManager : getModels(Q2)
  note right
    Q2: SELECT DISTINCT v.vehicleType.model FROM Vehicle v
  end note


GUI -> BLFacade : getBrands()
BLFacade -> DataAccess : getBrands()
DataAccess -> EntityManager : getBrands(Q3)
  note right
    Q3: SELECT DISTINCT v.vehicleType.brand FROM Vehicle v
  end note

Customer -> GUI : selects office, model, brand, enDate
Customer -> GUI: clicks on Search
GUI -> BLFacade : getAvailableVehicles(office, brand, model, endDate)
BLFacade -> DataAccess : getAvailableVehicles(office, brand, model, endDate)

'alt brand and model not empty

    DataAccess -> EntityManager : getAvailableVehicles(Q4)

'else

 '   DataAccess -> EntityManager : getAvailableVehicles(Q5)
'end

note right
    Q4: SELECT new VehicleModel(v.licensePlate, v.vehicleType.brand, v.vehicleType.model, t.pricePerDay)
            FROM Vehicle v, Tariff t
            WHERE v.vehicleType.brand = :brand
            AND v.vehicleType.model = :model
            AND v.state = VehicleState.AVAILABLE
            AND t.office = :office
            AND t.startDate <= :endDate
            AND t.endDate >= :endDate
end note

activate EntityManager
loop for each AVAILABLE vehicle
EntityManager -> VehicleModel: new (licensePlate, brand, model, pricePerDay)
end loop

alt not vehicles available
 GUI -> GUI: show error message

end


activate VehicleModel
deactivate EntityManager

Customer -> GUI: selects vehicleModel, pricePerDay
Customer -> GUI: clicks on Pay
GUI -> BLFacade: rentVehicle(vehicleModel, days, vehicle.getPrice()
BLFacade -> DataAccess: rentVehicle(vehicleModel, days, pricePerDay, currentUser)
DataAccess -> EntityManager: db.find(Vehicle.class, vehicleModel.getPlate())
EntityManager --> DataAccess: vehicle

DataAccess -> EntityManager: getTransaction().begin()
DataAccess -> Vehicle: setState(RENTED)
DataAccess -> Renting: r = new(now, endDate, v, pricePerDay*days, client)
DataAccess -> Renting: setPaid(pricePerDay*days*0.2);
DataAccess -> Vehicle: addRenting(r)


DataAccess -> EntityManager: persist(r)
' DataAccess -> EntityManager: persist(v)  (Not Needed)
DataAccess -> EntityManager: getTransaction().commit()



GUI --> GUI: remove(vehicle)

@enduml
